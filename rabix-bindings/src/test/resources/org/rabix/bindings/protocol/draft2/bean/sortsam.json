{
	"inputs": 
	{
		"output_type": "BAM",
		"sort_order": "unsorted",
		"create_index": "True",
		"quiet": "True",
		"validation_stringency": "SILENT",
		"compression_level": 50,
		"input_bam": 
		{
			"path": "/sbgenomics/input.bam"
		}
	},

	"app": 
	{
		"id": "app",
		"inputs": 
		[
			{
				"id": "#output_type",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"BAM",
							"SAM",
							"Same_as_input"
						],

						"type": "enum",
						"name": "output_type"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 3,
					"prefix": "SO=",
					"separate": false
				},

				"id": "#sort_order",
				"type": 
				[
					{
						"symbols": 
						[
							"unsorted",
							"queryname",
							"coordinate"
						],

						"type": "enum",
						"name": "sort_order"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 5,
					"prefix": "CREATE_INDEX=",
					"separate": false
				},

				"id": "#create_index",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "create_index"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "QUIET=",
					"separate": false
				},

				"id": "#quiet",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "quiet"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "VALIDATION_STRINGENCY=",
					"separate": false
				},

				"id": "#validation_stringency",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"STRICT",
							"LENIENT",
							"SILENT"
						],

						"type": "enum",
						"name": "validation_stringency"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "COMPRESSION_LEVEL=",
					"separate": false
				},

				"id": "#compression_level",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "MAX_RECORDS_IN_RAM=",
					"separate": false
				},

				"id": "#max_records_in_ram",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"position": 1,
					"prefix": "I",
					"separate": true
				},

				"id": "#input_bam",
				"type": 
				[
					"file"
				]
			}
		],

		"hints": 
		[
			{
				"class": "sbg:CPURequirement",
				"value": 1
			},

			{
				"class": "sbg:MemRequirement",
				"value": 1000
			}
		],

		"requirements": 
		[
			{
				"class": "DockerRequirement",
				"dockerPull": "djordjeklisic/picard_1.126:no_R",
				"dockerImageId": "9b6931a56d30"
			}
		],

		"description": "Sorts a BAM file in a chosen order. Files can be sorted either in coordinate order or by query name.\nNote that most of the apps which process BAM files require them to be sorted in coordinate order.",
		"outputs": 
		[
			{
				"outputBinding": 
				{
					"secondaryFiles": 
					[
						"bai"
					],

					"glob": 
					{
						"engine": "cwl-js-engine",
						"class": "Expression",
						"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
					}
				},

				"id": "#sorted_bam",
				"type": 
				[
					"null",
					"file"
				]
			}
		],

		"label": "Picard Sort",
		"arguments": 
		[
			{
				"prefix": "OUTPUT=",
				"separate": false,
				"order": 2,
				"valueFrom": 
				{
					"engine": "cwl-js-engine",
					"class": "Expression",
					"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
				}
			}
		],

		"baseCommand": 
		[
			"java -jar /picard-tools-1.126/picard.jar SortSam"
		],

		"stdin": "",
		"stdout": "",
		"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
		"class": "CommandLineTool"
	}
}