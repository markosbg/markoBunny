{
	"inputs": 
	{
		"input_bam": 
		{
			"path": "/sbgenomics/input.bam"
		},

		"output_type": "BAM",
		"create_index": "True",
		"validation_stringency": "SILENT",
		"verbosity": "INFO"
	},

	"app": 
	{
		"id": "app",
		"inputs": 
		[
			{
				"inputBinding": 
				{
					"position": 1,
					"prefix": "I",
					"separate": true
				},

				"id": "#input_bam",
				"type": 
				[
					"file"
				]
			},

			{
				"id": "#output_type",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"BAM",
							"SAM",
							"Same as input"
						],

						"type": "enum",
						"name": "output_type"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 5,
					"prefix": "CREATE_INDEX=",
					"separate": false
				},

				"id": "#create_index",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "create_index"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "QUIET=",
					"separate": false
				},

				"id": "#quiet",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "quiet"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "VALIDATION_STRINGENCY=",
					"separate": false
				},

				"id": "#validation_stringency",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"STRICT",
							"LENIENT",
							"SILENT"
						],

						"type": "enum",
						"name": "validation_stringency"
					}
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "COMPRESSION_LEVEL=",
					"separate": false
				},

				"id": "#compression_level",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "MAX_RECORDS_IN_RAM=",
					"separate": false
				},

				"id": "#max_records_in_ram",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"position": 7,
					"prefix": "VERBOSITY=",
					"separate": false
				},

				"id": "#verbosity",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"ERROR",
							"WARNING",
							"INFO",
							"DEBUG"
						],

						"type": "enum",
						"name": "verbosity"
					}
				]
			}
		],

		"hints": 
		[
			{
				"class": "sbg:CPURequirement",
				"value": 1
			},

			{
				"class": "sbg:MemRequirement",
				"value": 1000
			}
		],

		"requirements": 
		[
			{
				"class": "DockerRequirement",
				"dockerPull": "djordjeklisic/picard_1.126:no_R",
				"dockerImageId": "9b6931a56d30"
			}
		],

		"description": "This utility accepts aligned, coordinate-sorted reads in BAM or SAM format and identifies duplicate molecules. It then outputs an alignment file in which duplicate reads are marked or removed.",
		"outputs": 
		[
			{
				"outputBinding": 
				{
					"secondaryFiles": 
					[
						".bam.bai"
					],

					"glob": 
					{
						"engine": "cwl-js-engine",
						"class": "Expression",
						"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
					},

					"sbg:metadata":
					{
						"file_type": 
						{
							"engine": "cwl-js-engine",
							"class": "Expression",
							"script": "$self.split(\".\")[$self.split(\".\").length -1]"
						},

						"__inherit__": "input_bam"
					}
				},

				"id": "#cleaned_bam",
				"type": 
				[
					"null",
					"file"
				]
			}
		],

		"label": "Picard CleanSAM",
		"arguments": 
		[
			{
				"prefix": "O=",
				"separate": false,
				"order": 2,
				"valueFrom": 
				{
					"engine": "cwl-js-engine",
					"class": "Expression",
					"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
				}
			}
		],

		"baseCommand": 
		[
			"java",
			"-jar",
			"/picard-tools-1.126/picard.jar",
			"CleanSam"
		],

		"stdin": "",
		"stdout": "",
		"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
		"class": "CommandLineTool"
	}
}