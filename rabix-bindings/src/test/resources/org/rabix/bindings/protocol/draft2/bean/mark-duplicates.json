{
	"inputs": 
	{
		"read_name_regex": "something",
		"sorting_collections_size_ratio": 50,
		"max_file_handles_for_read_ends_map": "max_file_handles_something",
		"max_sequences_for_disk_read_ends_map": 20,
		"assume_sorted": "False",
		"comment": "some_comment",
		"program_group_name": "group_name",
		"output_type": "BAM",
		"create_index": "True",
		"input_bam": 
		{
			"path": "/sbgenomics/input.bam"
		}
	},

	"app": 
	{
		"id": "app",
		"inputs": 
		[
			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "READ_NAME_REGEX=",
					"separate": false
				},

				"id": "#read_name_regex",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "SORTING_COLLECTION_SIZE_RATIO=",
					"separate": false
				},

				"id": "#sorting_collections_size_ratio",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "MAX_FILE_HANDLES=",
					"separate": false
				},

				"id": "#max_file_handles_for_read_ends_map",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "MAX_SEQS=",
					"separate": false
				},

				"id": "#max_sequences_for_disk_read_ends_map",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "AS=",
					"separate": false
				},

				"id": "#assume_sorted",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"true",
							"false"
						],

						"type": "enum",
						"name": "assume_sorted"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 3,
					"prefix": "REMOVE_DUPLICATES=",
					"separate": false
				},

				"id": "#remove_duplicates",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"true",
							"false"
						],

						"type": "enum",
						"name": "remove_duplicates"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "COMMENT=",
					"separate": false
				},

				"id": "#comment",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "PG_NAME=",
					"separate": false
				},

				"id": "#program_group_name",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "PG_COMMAND=",
					"separate": false
				},

				"id": "#program_group_command_line",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "PG_VERSION=",
					"separate": false
				},

				"id": "#program_group_ver",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 10,
					"prefix": "PG=",
					"separate": false
				},

				"id": "#program_record",
				"type": 
				[
					"null",
					"string"
				]
			},

			{
				"inputBinding": 
				{
					"position": 6,
					"prefix": "VERBOSITY=",
					"separate": false
				},

				"id": "#verbosity",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"ERROR",
							"WARNING",
							"INFO",
							"DEBUG"
						],

						"type": "enum",
						"name": "verbosity"
					}
				]
			},

			{
				"id": "#output_type",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"BAM",
							"SAM",
							"Same as input"
						],

						"type": "enum",
						"name": "output_type"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 5,
					"prefix": "CREATE_INDEX=",
					"separate": false
				},

				"id": "#create_index",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "create_index"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 4,
					"prefix": "QUIET=",
					"separate": false
				},

				"id": "#quiet",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"True",
							"False"
						],

						"type": "enum",
						"name": "quiet"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 4,
					"prefix": "VALIDATION_STRINGENCY=",
					"separate": false
				},

				"id": "#validation_stringency",
				"type": 
				[
					"null",
					{
						"symbols": 
						[
							"STRICT",
							"LENIENT",
							"SILENT"
						],

						"type": "enum",
						"name": "validation_stringency"
					}
				]
			},

			{
				"inputBinding": 
				{
					"position": 4,
					"prefix": "COMPRESSION_LEVEL=",
					"separate": false
				},

				"id": "#compression_level",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"position": 4,
					"prefix": "MAX_RECORDS_IN_RAM=",
					"separate": false
				},

				"id": "#max_records_in_ram",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"position": 9,
					"prefix": "OPTICAL_DUPLICATE_PIXEL_DISTANCE=",
					"separate": false
				},

				"id": "#optical_duplicate_pixel_distance",
				"type": 
				[
					"null",
					"int"
				]
			},

			{
				"inputBinding": 
				{
					"prefix": "I=",
					"separate": false,
					"order": 0
				},

				"id": "#input_bam",
				"type": 
				[
					"file"
				]
			}
		],

		"hints": 
		[
			{
				"class": "sbg:CPURequirement",
				"value": 1
			},

			{
				"class": "sbg:MemRequirement",
				"value": 1000
			}
		],

		"requirements": 
		[
			{
				"class": "DockerRequirement",
				"dockerPull": "djordjeklisic/picard_1.126:no_R",
				"dockerImageId": "9b6931a56d30"
			}
		],

		"description": "",
		"outputs": 
		[
			{
				"outputBinding": 
				{
					"glob": 
					{
						"engine": "cwl-js-engine",
						"class": "Expression",
						"script": "{\n  filename = $job.inputs.input_bam.path\n\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"metrics\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n\n}"
					},

					"sbg:metadata":
					{
						"file_type": "txt",
						"__inherit__": "input_bam"
					}
				},

				"id": "#metrics_file",
				"type": 
				[
					"null",
					"file"
				]
			},

			{
				"outputBinding": 
				{
					"secondaryFiles": 
					[
						".bai"
					],

					"glob": 
					{
						"engine": "cwl-js-engine",
						"class": "Expression",
						"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
					},

					"sbg:metadata":
					{
						"file_type": 
						{
							"engine": "cwl-js-engine",
							"class": "Expression",
							"script": "$self.split(\".\")[$self.split(\".\").length -1]"
						},

						"__inherit__": "input_bam"
					}
				},

				"id": "#deduped_bam",
				"type": 
				[
					"null",
					"file"
				]
			}
		],

		"label": "Picard dedupe",
		"arguments": 
		[
			{
				"prefix": "M=",
				"separate": false,
				"order": 4,
				"valueFrom": 
				{
					"engine": "cwl-js-engine",
					"class": "Expression",
					"script": "{\n  filename = $job.inputs.input_bam.path\n\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"metrics\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n\n}"
				}
			},

			{
				"prefix": "O=",
				"separate": false,
				"order": 2,
				"valueFrom": 
				{
					"engine": "cwl-js-engine",
					"class": "Expression",
					"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
				}
			}
		],

		"baseCommand": 
		[
			"java -jar /picard-tools-1.126/picard.jar MarkDuplicates"
		],

		"stdin": "",
		"stdout": "",
		"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
		"class": "CommandLineTool"
	}
}