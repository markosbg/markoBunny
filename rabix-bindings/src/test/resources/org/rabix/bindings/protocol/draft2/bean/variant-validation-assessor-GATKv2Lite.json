{
	"inputs": 
	{
		
	},

	"app": 
	{
		"id": "wf",
		"class": "Workflow",
		"@context": "https://raw.githubusercontent.com/common-workflow-language/common-workflow-language/draft2/specification/context.json",
		"steps": 
		[
			{
				"id": "#Picard Sort",
				"run": 
				{
					"arguments": 
					[
						{
							"order": 2,
							"prefix": "OUTPUT",
							"value": 
							{
								"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
								"engine": "cwl-js-engine",
								"class": "Expression"
							},

							"separate": true
						}
					],

					"stdout": "",
					"stdin": "",
					"baseCommand": 
					[
						"java -jar /picard-tools-1.126/picard.jar SortSam"
					],

					"outputs": 
					[
						{
							"outputBinding": 
							{
								"secondaryFiles": 
								[
									"bai"
								],

								"glob": 
								{
									"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"sorted.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
									"engine": "cwl-js-engine",
									"class": "Expression"
								},

								"sbg:metadata":
								{
									"__inherit__": "input_bam",
									"file_type": 
									{
										"script": "$self.split(\".\")[$self.split(\".\").length -1]",
										"engine": "cwl-js-engine",
										"class": "Expression"
									}
								}
							},

							"type": 
							[
								"null",
								"file"
							],

							"id": "#sorted_bam"
						}
					],

					"inputs": 
					[
						{
							"type": 
							[
								"null",
								{
									"name": "output_type",
									"symbols": 
									[
										"BAM",
										"SAM",
										"Same_as_input"
									],

									"type": "enum"
								}
							],

							"id": "#output_type"
						},

						{
							"outputBinding": 
							{
								"position": 3,
								"separate": true,
								"prefix": "SO"
							},

							"type": 
							[
								{
									"name": "sort_order",
									"symbols": 
									[
										"unsorted",
										"queryname",
										"coordinate"
									],

									"type": "enum"
								}
							],

							"id": "#sort_order"
						},

						{
							"outputBinding": 
							{
								"position": 5,
								"separate": true,
								"prefix": "CREATE_INDEX"
							},

							"type": 
							[
								"null",
								{
									"name": "create_index",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#create_index"
						},

						{
							"outputBinding": 
							{
								"separate": true,
								"prefix": "QUIET"
							},

							"type": 
							[
								"null",
								{
									"name": "quiet",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#quiet"
						},

						{
							"outputBinding": 
							{
								"separate": true,
								"prefix": "VALIDATION_STRINGENCY"
							},

							"type": 
							[
								"null",
								{
									"name": "validation_stringency",
									"symbols": 
									[
										"STRICT",
										"LENIENT",
										"SILENT"
									],

									"type": "enum"
								}
							],

							"id": "#validation_stringency"
						},

						{
							"outputBinding": 
							{
								"separate": true,
								"prefix": "COMPRESSION_LEVEL"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#compression_level"
						},

						{
							"outputBinding": 
							{
								"separate": true,
								"prefix": "MAX_RECORDS_IN_RAM"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#max_records_in_ram"
						},

						{
							"outputBinding": 
							{
								"position": 1,
								"separate": true,
								"prefix": "I"
							},

							"type": 
							[
								"file"
							],

							"id": "#input_bam"
						}
					],

					"hints": 
					[
						{
							"value": 1,
							"class": "sbg:CPURequirement"
						},

						{
							"value": 1000,
							"class": "sbg:MemRequirement"
						}
					],

					"requirements": 
					[
						{
							"class": "DockerRequirement",
							"dockerPull": "djordjeklisic/picard_1.126:no_R",
							"dockerImageId": "9b6931a56d30"
						}
					],

					"contributor": 
					[
						
					],

					"owner": 
					[
						"djordje.klisic@sbgenomics.com"
					],

					"description": "",
					"label": "Picard Sort",
					"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
					"class": "CommandLineTool",
					"id": "http://localhost:3000/tool-revision/5512a39aaee374793dce558e"
				},

				"inputs": 
				[
					{
						"id": "#Picard Sort.output_type"
					},

					{
						"id": "#Picard Sort.sort_order",
						"default": "coordinate"
					},

					{
						"id": "#Picard Sort.create_index"
					},

					{
						"id": "#Picard Sort.quiet"
					},

					{
						"id": "#Picard Sort.validation_stringency"
					},

					{
						"id": "#Picard Sort.compression_level"
					},

					{
						"id": "#Picard Sort.max_records_in_ram"
					},

					{
						"id": "#Picard Sort.input_bam"
					}
				],

				"outputs": 
				[
					{
						"id": "#Picard Sort.sorted_bam"
					}
				]
			},

			{
				"id": "#Picard CleanSAM",
				"run": 
				{
					"arguments": 
					[
						{
							"separate": true,
							"value": 
							{
								"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
								"engine": "cwl-js-engine",
								"class": "Expression"
							},

							"prefix": "O",
							"order": 2
						}
					],

					"stdout": "",
					"stdin": "",
					"baseCommand": 
					[
						"java -jar /picard-tools-1.126/picard.jar CleanSam"
					],

					"outputs": 
					[
						{
							"outputBinding": 
							{
								"secondaryFiles": 
								[
									".bam.bai"
								],

								"glob": 
								{
									"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"cleaned.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
									"engine": "cwl-js-engine",
									"class": "Expression"
								},

								"sbg:metadata":
								{
									"file_type": 
									{
										"script": "$self.split(\".\")[$self.split(\".\").length -1]",
										"engine": "cwl-js-engine",
										"class": "Expression"
									},

									"__inherit__": "input_bam"
								}
							},

							"type": 
							[
								"null",
								"file"
							],

							"id": "#cleaned_bam"
						}
					],

					"inputs": 
					[
						{
							"inputBinding": 
							{
								"position": 1,
								"separate": true,
								"prefix": "I"
							},

							"type": 
							[
								"file"
							],

							"id": "#input_bam"
						},

						{
							"type": 
							[
								"null",
								{
									"name": "output_type",
									"symbols": 
									[
										"BAM",
										"SAM",
										"Same as input"
									],

									"type": "enum"
								}
							],

							"id": "#output_type"
						},

						{
							"inputBinding": 
							{
								"position": 5,
								"separate": true,
								"prefix": "CREATE_INDEX"
							},

							"type": 
							[
								"null",
								{
									"name": "create_index",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#create_index"
						},

						{
							"inputBinding": 
							{
								"separate": true,
								"prefix": "QUIET"
							},

							"type": 
							[
								"null",
								{
									"name": "quiet",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#quiet"
						},

						{
							"inputBinding": 
							{
								"separate": true,
								"prefix": "VALIDATION_STRINGENCY"
							},

							"type": 
							[
								"null",
								{
									"name": "validation_stringency",
									"symbols": 
									[
										"STRICT",
										"LENIENT",
										"SILENT"
									],

									"type": "enum"
								}
							],

							"id": "#validation_stringency"
						},

						{
							"inputBinding": 
							{
								"separate": true,
								"prefix": "COMPRESSION_LEVEL"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#compression_level"
						},

						{
							"inputBinding": 
							{
								"separate": true,
								"prefix": "MAX_RECORDS_IN_RAM"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#max_records_in_ram"
						},

						{
							"inputBinding": 
							{
								"position": 7,
								"separate": true,
								"prefix": "VERBOSITY"
							},

							"type": 
							[
								"null",
								{
									"name": "verbosity",
									"symbols": 
									[
										"ERROR",
										"WARNING",
										"INFO",
										"DEBUG"
									],

									"type": "enum"
								}
							],

							"id": "#verbosity"
						}
					],

					"hints": 
					[
						{
							"value": 1,
							"class": "sbg:CPURequirement"
						},

						{
							"value": 1000,
							"class": "sbg:MemRequirement"
						}
					],

					"requirements": 
					[
						{
							"imgId": "9b6931a56d30",
							"imgTag": "",
							"imgRepo": "djordjeklisic/picard_1.126:no_R",
							"class": "DockerRequirement"
						}
					],

					"contributor": 
					[
						
					],

					"owner": 
					[
						"djordjeklisic"
					],

					"description": "",
					"label": "Picard CleanSAM",
					"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
					"class": "CommandLineTool",
					"id": "http://localhost:3000/tool-revision/5512a350aee374793dce558c"
				},

				"inputs": 
				[
					{
						"id": "#Picard CleanSAM.input_bam"
					},

					{
						"id": "#Picard CleanSAM.output_type"
					},

					{
						"id": "#Picard CleanSAM.create_index"
					},

					{
						"id": "#Picard CleanSAM.quiet"
					},

					{
						"id": "#Picard CleanSAM.validation_stringency"
					},

					{
						"id": "#Picard CleanSAM.compression_level"
					},

					{
						"id": "#Picard CleanSAM.max_records_in_ram"
					},

					{
						"id": "#Picard CleanSAM.verbosity"
					}
				],

				"outputs": 
				[
					{
						"id": "#Picard CleanSAM.cleaned_bam"
					}
				]
			},

			{
				"id": "#Picard dedupe",
				"run": 
				{
					"arguments": 
					[
						{
							"separate": true,
							"value": 
							{
								"script": "{\n  filename = $job.inputs.input_bam.path\n\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"metrics\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n\n}",
								"engine": "cwl-js-engine",
								"class": "Expression"
							},

							"prefix": "M",
							"order": 4
						},

						{
							"separate": true,
							"value": 
							{
								"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
								"engine": "cwl-js-engine",
								"class": "Expression"
							},

							"prefix": "O",
							"order": 2
						}
					],

					"stdout": "",
					"stdin": "",
					"baseCommand": 
					[
						"java -jar /picard-tools-1.126/picard.jar MarkDuplicates"
					],

					"outputs": 
					[
						{
							"outputBinding": 
							{
								"sbg:metadata":
								{
									"__inherit__": "input_bam",
									"file_type": "txt"
								},

								"glob": 
								{
									"script": "{\n  filename = $job.inputs.input_bam.path\n\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"metrics\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n\n}",
									"engine": "cwl-js-engine",
									"class": "Expression"
								}
							},

							"type": 
							[
								"null",
								"file"
							],

							"id": "#metrics_file"
						},

						{
							"outputBinding": 
							{
								"secondaryFiles": 
								[
									".bai"
								],

								"glob": 
								{
									"script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"deduped.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
									"engine": "cwl-js-engine",
									"class": "Expression"
								},

								"sbg:metadata":
								{
									"file_type": 
									{
										"script": "$self.split(\".\")[$self.split(\".\").length -1]",
										"engine": "cwl-js-engine",
										"class": "Expression"
									},

									"__inherit__": "input_bam"
								}
							},

							"type": 
							[
								"null",
								"file"
							],

							"id": "#deduped_bam"
						}
					],

					"inputs": 
					[
						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "READ_NAME_REGEX",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#read_name_regex"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "SORTING_COLLECTION_SIZE_RATIO",
								"separate": true
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#sorting_collections_size_ratio"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "MAX_FILE_HANDLES",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#max_file_handles_for_read_ends_map"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "MAX_SEQS",
								"separate": true
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#max_sequences_for_disk_read_ends_map"
						},

						{
							"inputBinding": 
							{
								"prefix": "AS",
								"separate": true
							},

							"type": 
							[
								"null",
								{
									"name": "assume_sorted",
									"symbols": 
									[
										"true",
										"false"
									],

									"type": "enum"
								}
							],

							"id": "#assume_sorted"
						},

						{
							"inputBinding": 
							{
								"position": 3,
								"prefix": "REMOVE_DUPLICATES",
								"separate": true
							},

							"type": 
							[
								"null",
								{
									"name": "remove_duplicates",
									"symbols": 
									[
										"true",
										"false"
									],

									"type": "enum"
								}
							],

							"id": "#remove_duplicates"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "COMMENT",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#comment"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "PG_NAME",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#program_group_name"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "PG_COMMAND",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#program_group_command_line"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"prefix": "PG_VERSION",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#program_group_ver"
						},

						{
							"inputBinding": 
							{
								"position": 10,
								"prefix": "PG",
								"separate": true
							},

							"type": 
							[
								"null",
								"string"
							],

							"id": "#program_record"
						},

						{
							"inputBinding": 
							{
								"position": 6,
								"prefix": "VERBOSITY",
								"separate": true
							},

							"type": 
							[
								"null",
								{
									"name": "verbosity",
									"symbols": 
									[
										"ERROR",
										"WARNING",
										"INFO",
										"DEBUG"
									],

									"type": "enum"
								}
							],

							"id": "#verbosity"
						},

						{
							"type": 
							[
								"null",
								{
									"name": "output_type",
									"symbols": 
									[
										"BAM",
										"SAM",
										"Same as input"
									],

									"type": "enum"
								}
							],

							"id": "#output_type"
						},

						{
							"inputBinding": 
							{
								"position": 5,
								"separate": true,
								"prefix": "CREATE_INDEX"
							},

							"type": 
							[
								"null",
								{
									"name": "create_index",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#create_index"
						},

						{
							"inputBinding": 
							{
								"position": 4,
								"separate": true,
								"prefix": "QUIET"
							},

							"type": 
							[
								"null",
								{
									"name": "quiet",
									"symbols": 
									[
										"True",
										"False"
									],

									"type": "enum"
								}
							],

							"id": "#quiet"
						},

						{
							"inputBinding": 
							{
								"position": 4,
								"separate": true,
								"prefix": "VALIDATION_STRINGENCY"
							},

							"type": 
							[
								"null",
								{
									"name": "validation_stringency",
									"symbols": 
									[
										"STRICT",
										"LENIENT",
										"SILENT"
									],

									"type": "enum"
								}
							],

							"id": "#validation_stringency"
						},

						{
							"inputBinding": 
							{
								"position": 4,
								"separate": true,
								"prefix": "COMPRESSION_LEVEL"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#compression_level"
						},

						{
							"inputBinding": 
							{
								"position": 4,
								"separate": true,
								"prefix": "MAX_RECORDS_IN_RAM"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#max_records_in_ram"
						},

						{
							"inputBinding": 
							{
								"position": 9,
								"separate": true,
								"prefix": "OPTICAL_DUPLICATE_PIXEL_DISTANCE"
							},

							"type": 
							[
								"null",
								"int"
							],

							"id": "#optical_duplicate_pixel_distance"
						},

						{
							"inputBinding": 
							{
								"separate": true,
								"order": 0,
								"prefix": "I"
							},

							"type": 
							[
								"file"
							],

							"id": "#input_bam"
						}
					],

					"hints": 
					[
						{
							"value": 1,
							"class": "sbg:CPURequirement"
						},

						{
							"value": 1000,
							"class": "sbg:MemRequirement"
						}
					],

					"requirements": 
					[
						{
							"imgId": "9b6931a56d30",
							"imgTag": "",
							"imgRepo": "djordjeklisic/picard_1.126:no_R",
							"class": "DockerRequirement"
						}
					],

					"contributor": 
					[
						
					],

					"owner": 
					[
						"djordjeklisic"
					],

					"description": "",
					"label": "Picard dedupe",
					"@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
					"class": "CommandLineTool",
					"id": "http://localhost:3000/tool-revision/5512a381aee374793dce558d"
				},

				"inputs": 
				[
					{
						"id": "#Picard dedupe.read_name_regex"
					},

					{
						"id": "#Picard dedupe.sorting_collections_size_ratio"
					},

					{
						"id": "#Picard dedupe.max_file_handles_for_read_ends_map"
					},

					{
						"id": "#Picard dedupe.max_sequences_for_disk_read_ends_map"
					},

					{
						"id": "#Picard dedupe.assume_sorted"
					},

					{
						"id": "#Picard dedupe.remove_duplicates"
					},

					{
						"id": "#Picard dedupe.comment"
					},

					{
						"id": "#Picard dedupe.program_group_name"
					},

					{
						"id": "#Picard dedupe.program_group_command_line"
					},

					{
						"id": "#Picard dedupe.program_group_ver"
					},

					{
						"id": "#Picard dedupe.program_record"
					},

					{
						"id": "#Picard dedupe.verbosity"
					},

					{
						"id": "#Picard dedupe.output_type"
					},

					{
						"id": "#Picard dedupe.create_index"
					},

					{
						"id": "#Picard dedupe.quiet"
					},

					{
						"id": "#Picard dedupe.validation_stringency"
					},

					{
						"id": "#Picard dedupe.compression_level"
					},

					{
						"id": "#Picard dedupe.max_records_in_ram"
					},

					{
						"id": "#Picard dedupe.optical_duplicate_pixel_distance"
					},

					{
						"id": "#Picard dedupe.input_bam"
					}
				],

				"outputs": 
				[
					{
						"id": "#Picard dedupe.metrics_file"
					},

					{
						"id": "#Picard dedupe.deduped_bam"
					}
				]
			}
		],

		"dataLinks": 
		[
			{
				"source": "#Picard dedupe.deduped_bam",
				"destination": "#output_1"
			},

			{
				"source": "#Picard CleanSAM.cleaned_bam",
				"destination": "#Picard Sort.input_bam"
			},

			{
				"source": "#input",
				"destination": "#Picard CleanSAM.input_bam"
			},

			{
				"source": "#Picard Sort.sorted_bam",
				"destination": "#Picard dedupe.input_bam"
			},

			{
				"source": "#Picard dedupe.metrics_file",
				"destination": "#output"
			}
		],

		"inputs": 
		[
			{
				"id": "#input",
				"type": 
				[
					"null",
					"file"
				]
			}
		],

		"outputs": 
		[
			{
				"id": "#output",
				"type": 
				[
					"null",
					"file"
				]
			},

			{
				"id": "#output_1",
				"type": 
				[
					"null",
					"file"
				]
			}
		]
	}
}